// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  fullName           String?
  address            String        @unique
  email              String        @unique
  smartAccountAddress String? 
  companyName        String?
  companyUrl         String?
  companyImage       String? 
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  products           Product[]
  paymentLinks       PaymentLink[]
  customers           Customer[]
  transactions        Transaction[]
  webhooks            Webhook[]
}

model Product {
  id               String        @id @default(uuid())
  name             String
  description      String
  imageUrl         String
  price            Decimal       @db.Decimal(10, 2)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  paymentLinks     PaymentLink[]
  transactions     Transaction[]
}

model PaymentLink {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  redirectUrl String
  requiresWorldId Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
}

model Webhook {
  id        String   @id @default(uuid())
  name      String
  url       String
  event     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventLogs WebhookEventLog[]
}

enum WebhookEventLogStatus {
  SUCCESS
  BAD_REQUEST
  UNAUTHORIZED
  NOT_FOUND
  INTERNAL_SERVER_ERROR
  TIMEOUT
  UNKNOWN
}

model WebhookEventLog {
  id        String   @id @default(uuid())
  webhookId String
  data      Json
  response  Json?
  status WebhookEventLogStatus
  statusCode Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  webhook   Webhook  @relation(fields: [webhookId], references: [id])
}

model Transaction {
  id         String   @id @default(uuid())
  hash       String   @unique
  amount     String  
  timestamp  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String
  productId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Customer {
  id           String        @id @default(uuid())
  address      String        @unique
  ens          String?       @unique
  avatar       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Record {
  id              Int       @id @default(autoincrement())
  
  name            String    @unique
  owner           String
  addresses       Json
  texts           Json
  contenthash     String

  createdAt       DateTime  @map("created_at") @default(now())
  updatedAt       DateTime  @map("updated_at") @default(now())    

  @@index([owner])
}